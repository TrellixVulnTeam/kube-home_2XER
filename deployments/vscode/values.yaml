# Default values for vscode.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: codercom/code-server
  tag: 1.939
  pullPolicy: IfNotPresent
  pullSecrets: []

namespace: default

# upgrade strategy type (e.g. Recreate or RollingUpdate)
strategyType: Recreate

#priorityClassName

service:
  type: LoadBalancer
  loadBalancerIP: 192.168.29.15
  port: 8123
  annotations: {}
  labels: {}
  clusterIP: ""
  ## List of IP addresses at which the hass-configurator service is available
  ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
  ##
  externalIPs: []
  loadBalancerSourceRanges: []
  # nodePort: 30000

ingress:
  enabled: false
  annotations:
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
  #  - rbpsycamore.duckdns.org
    - vscode.local
  tls: []
  #  - secretName: vscode-tls
  #    hosts:
  #      - vscode.local

hostNetwork: true

persistence:
  hass:
    config:
      enabled: true
      ## home-assistant data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      storageClass: vscode-hass
      ##
      ## If you want to reuse an existing claim, you can pass the name of the PVC using
      ## the existingClaim variable
      existingClaim: vscode-hass
      accessMode: ReadWriteOnce
      size: 5Gi
  kubeHome:
    config:
      enabled: true
      ## home-assistant data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      storageClass: vscode-kube-home
      ##
      ## If you want to reuse an existing claim, you can pass the name of the PVC using
      ## the existingClaim variable
      existingClaim: vscode-kube-home
      accessMode: ReadWriteOnce
      size: 5Gi

## Additional hass container environment variable
## For instance to add a http_proxy
##
extraEnv: {}

## Additional hass container environment variable from k8s secrets
## For instance to add a password
## can use `!env_var` in the home assistant configuration to reference these variables
extraEnvSecrets:
  # Example
  # This will set ${MQTT_PASSWORD} to the 'password' key from the 'mqtt' secret
  # MQTT_PASSWORD:
  #   secret: mqtt
  #   key: password

# Enable pod security context (must be `true` if runAsUser or fsGroup are set)
usePodSecurityContext: true
# Set runAsUser to 1000 to let vscode run as non-root user 'hass' which exists in 'runningman84/alpine-homeassistant' docker image.
# When setting runAsUser to a different value than 0 also set fsGroup to the same value:
# runAsUser: <defaults to 0>
# fsGroup: <will be omitted in deployment if runAsUser is 0>

git:
  enabled: false

  ## we just use the hass-configurator container image
  ## you can use any image which has git and openssh installed
  ##
  image:
    repository: causticlab/hass-configurator-docker
    tag: x86_64-0.3.1
    pullPolicy: IfNotPresent

  # repo:
  secret: git-creds
  syncPath: /config
  keyPath: /root/.ssh

vscode:
  hass:
    enabled: true

    ## code-server container image
    ##

    ## VSCode password
    hassPassword: MTU0NjlmYTMyNjQyYmE0YzI0NGU1NWY4

    ## path where the home assistant configuration is stored
    configDir: /home-assistant
    mountPath: /home-assistant

    ## path where the VS Code data should reside
    vscodePath: /home-assistant/.vscode

    ## Additional hass-vscode container environment variable
    ## For instance to add a http_proxy
    ##
    extraEnv: {}

    ingress:
      enabled: false
      annotations: {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
      path: /
      hosts:
        - vscode.kubehome.local
      tls: []
      #  - secretName: vscode-tls
      #    hosts:
      #      - vscode.local

    service:
      type: LoadBalancer
      loadBalancerIP: 192.168.29.15
      port: 90
      targetPort: 90
      annotations: {}
      labels: {}
      clusterIP: ""
      ## List of IP addresses at which the hass-vscode service is available
      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
      ##
      externalIPs: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      # nodePort: 30000
  kubeHome:
    enabled: true

    ## code-server container image
    ##

    ## VSCode password
    kubeHomePassword: MTU0NjlmYTMyNjQyYmE0YzI0NGU1NWY4

    ## path where the home assistant configuration is stored
    configDir: /kube-home
    mountPath: /kube-home

    ## path where the VS Code data should reside
    vscodePath: /kube-home/.vscode

    ## Additional hass-vscode container environment variable
    ## For instance to add a http_proxy
    ##
    extraEnv: {}

    ingress:
      enabled: false
      annotations: {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
      path: /
      hosts:
        - vscode.kubehome.local
      tls: []
      #  - secretName: vscode-tls
      #    hosts:
      #      - vscode.local

    service:
      type: LoadBalancer
      loadBalancerIP: 192.168.29.15
      port: 91
      targetPort: 91
      annotations: {}
      labels: {}
      clusterIP: ""
      ## List of IP addresses at which the hass-vscode service is available
      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
      ##
      externalIPs: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      # nodePort: 30000

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  requests:
   cpu: 250m
   memory: 1024Mi

nodeSelector: {}

tolerations: []

affinity: {}

podAnnotations:
  container.apparmor.security.beta.kubernetes.io/vscode-kube-home: unconfined
